/* tslint:disable */
/* eslint-disable */
/**
 * BarbarianFoodAPI
 * example
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DefaultResponse,
    DefaultResponseFromJSON,
    DefaultResponseToJSON,
    GetOfferDetailsResponse,
    GetOfferDetailsResponseFromJSON,
    GetOfferDetailsResponseToJSON,
    GetOfferResponse,
    GetOfferResponseFromJSON,
    GetOfferResponseToJSON,
    SubscribeRequest,
    SubscribeRequestFromJSON,
    SubscribeRequestToJSON,
} from '../models';

export interface GetOfferDetailsRequest {
    id: string;
}

export interface SubscribeToOfferRequest {
    id: string;
    subscribeRequest?: SubscribeRequest;
}

/**
 * 
 */
export class OfferApi extends runtime.BaseAPI {

    /**
     * Endpoint used to list every available subscription to customer
     */
    async getOfferRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetOfferResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offer/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOfferResponseFromJSON(jsonValue));
    }

    /**
     * Endpoint used to list every available subscription to customer
     */
    async getOffer(initOverrides?: RequestInit): Promise<GetOfferResponse> {
        const response = await this.getOfferRaw(initOverrides);
        return await response.value();
    }

    /**
     * Endpoint used to list details about selected offer
     */
    async getOfferDetailsRaw(requestParameters: GetOfferDetailsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetOfferDetailsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOfferDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offer/details/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOfferDetailsResponseFromJSON(jsonValue));
    }

    /**
     * Endpoint used to list details about selected offer
     */
    async getOfferDetails(requestParameters: GetOfferDetailsRequest, initOverrides?: RequestInit): Promise<GetOfferDetailsResponse> {
        const response = await this.getOfferDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Endpoint used to subscribe to the offer
     */
    async subscribeToOfferRaw(requestParameters: SubscribeToOfferRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DefaultResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscribeToOffer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/offer/subscribe/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscribeRequestToJSON(requestParameters.subscribeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultResponseFromJSON(jsonValue));
    }

    /**
     * Endpoint used to subscribe to the offer
     */
    async subscribeToOffer(requestParameters: SubscribeToOfferRequest, initOverrides?: RequestInit): Promise<DefaultResponse> {
        const response = await this.subscribeToOfferRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
